start.spring.io
gradle jar 

윈도우 환경에서 크롬으로 변경할때 파워셀에서는 이렇게

npm install concurrently --save-dev

"scripts": {
  "start": "concurrently \"react-scripts start\" \"powershell Start-Process chrome http://localhost:3000/\"",
  "build": "react-scripts build",
  "test": "react-scripts test",
  "eject": "react-scripts eject"
},


ctrl + k + f 자동정렬

회원가입 ,로그인,프로필수정,게시물작성 ,게시물리스트보기,게시물상세보기,게시물수정,게시물삭제,댓글작성,좋아요

POST /api/auth/signUp
DTO를 통한
-- userEmail, userPassword, userPasswordCheck, userNickname,
-- userPhoneNumber, userAddress, userAddressDetail

result, message, data { null }

사용자는 회원가입을 진행한다
이메일주소,비밀번호,비밀번호확인,닉네임,핸펀번호,주소,상세주소를 입력해서 회원가입을 진행한다.

-- POST /api/auth/signIn
-- userEmail, userPassword

--result,message,data { accessToken, axprTime } 


회원가입이 성공적으로 이루어지면 로그인을 진행한다
로그인 이메일과 패스워드로 로그인을 진행한다

로그인에 성공하면 메인화면으로 이동한다  --front

Get /api/board/top3

result,message,data{ BoardEntity[ ] }

SELECT * FROM Board WHERE board_write_date >= ? ORDER BY board_likes_cnt DESC LIMIT 3;
메인화면에는 주간TOP3게시글이 보인다
주간 Top3의 경우 좋아요 순으로 정렬한다

Get /api/board/list

result,messagem data { BoardEntity[ ] }

SELECT * FROM Board ORDER BY board_write_date DESC;
최신 게시물리스트 형식으로 출력된다


한페이지에 5개씩 게시물이 보인다  --front
페이징 처리가 되며,최대 10 페이지까지 보이고  --front
이전섹션과 이후섹션으로 이동하는 방향 버튼이 있다

Get /api/board/popularsearchList

result,messagem data { PopularSearchEntity[ ] }

SELECT * FROM Popularsearch ORDER BY popular_search_cnt DESC LIMIT 10;
인기검색어가 우측에 존재하도록 한다

Get /api/board/search/{boardTitle}

result, message,data{ BoardEntity[ ] }

SELECT * FROM Board WHERE board_title LIKE %?%;

상단에는 네비게이션 바가 있는데 네비게이션 바에서 검색을 할 수 있다
또한 네비게이션 바에서 마이페이지로 이동할 수 있다

Patch /api/user/
Request Header Authorization Bearer token
Request Body { userNickname: string, userProfile: string }

Response data { result, message, data { user } }

1. Bearer token에서 userEmail 꺼내옴
2. 꺼내온 userEmail로 데이터베이스 검색
SELECT * FROM User WHERE user_email = ?;
3.검색된 user Entity 에 받아온 userNickname과 userProfile로 각각 변경
4.변경된 user Entity 를 저장

마이페이지로 이동해서 프로필을 수정할 수 있고 닉네임도 수정할 수 있다
마이페이지에서 게시물을 등록할 수 있다
게시물 등록 시에는 제목,내용,사진,동영상,파일을 올릴 수 있다

게시물 리스트에서 게시물을 선택하면 해당게시물의 제목 ,작성자,작성자 프로필 사진,내용 작성일,사진,동영상 파일을
출력해준다

만약 본인게시물이라면 게시물을 수정할 수 있다
게시물 수정은 제목,내용, 사진, 동영상,파일을 수정할 수 있다

게시물 리스트에서 작성자의 프로필 사진,닉네임,게시물의 제목,내용,좋아요 수,댓글 수,조회 수가 보여진다

또한 본인 게시물이면 삭제 가능하다

본인 게시물이 아니면 좋아요를 할 수 있다 
게시물에 좋아요를 누른유저의 프로필사진과 닉네임이 모두 출력된다

모든게시물에 댓글을 작성할 수 있다
댓글은 내용만 작성한다
댓글은 작성자,작성자 프로필 사진, 작성일,내용이 출력된다
댓글은 한번에 3개만 출력되고 페이징이 최대 10페이지 까지 된다

이전섹션, 다음 섹션버튼이 존재한다
댓글수와 좋아요 수가 게시물 상세에서 표시가 된다

# User(user_email[PK], user_password, user_nickname,user_phone_number,user_address,user_address_detail, user_profile)
create table user(
	user_email varchar(50) PRIMARY KEY
	user_password VARCHAR(20) NOT NULL,
	user_nickname VARCHAR(30) NOT NULL,
      user_phone_number VARCHAR(15) NOT NULL,
	user_address TEXT NOT NULL,
	user_profile TEXT
);

# Board(board_number[PK],board_title, board_content,board_image, board_video, board_file,
        board_writer_email[FK-User(User_email)], board_writer_profile, board_Writer_nickname,
        board_write_date, board_click_count, board_like_count, board_comment_count)

CREATE TABLE Board(
	board_number INT PRIMARY KEY AUTO_INCREMENT,
	board_title VARCHAR(200) NOT NULL,
	board_content TEXT NOT NULL,
	board_image TEXT,
	board_video TEXT,
	board_file TEXT,
	board_writer_email VARCHAR(50) NOT NULL,
	board_writer_profile TEXT,
	board_writer_nickname VARCHAR(30) NOT NULL,
	board_write_date DATE NOT NULL,
	board_click_count INT DEFAULT 0,
	board_like_count INT DEFAULT 0,
	board_comment_count INT DEFAULT 0
);
        
  PopularSearch(popular_term[PK], popular_search_count)

CREATE TABLE PopularSerarch{
	popular_term TEXT PRIMARY KEY,
	popular_search_count INT DEFAULT 1
);

  Liky(board_number[FK-Board(board_number)], user_email[FK-User(user_email)], like_user_profile, like_user_nickname)

CREATE TABLE Liky(
	like_id INT AUTO_INCREMENT PRIMARY KEY,
	board_number INT NOT NULL,
	user_email VARCHAR(50) NOT NULL,
	like_user_profile TEXT,
	like_user_nickname VARCHAR(30) NOT NULL
);


  Comment(board_number[FK-Board(board_number)], user_email[FK-User(user_email)],
          like_user_profile, like_user_nickname, comment_write_date, comment_content)

CREATE TABLE Comment(
	comment_id INT AUTO_INCREMENT PRIMARY KEY,
	board_number INT NOT NULL,
	user_email VARCHAR(50) NOT NULL,
	comment_user_profile TEXT,
	comment_user_nickname VARCHAR(30) NOT NULL,
	comment_write_date Date NOt NULL,
	comment_content TEXT NOT NULL
);

역정규화 검색속도를 높이기 위하여 위에처럼 해준다.. 무결성의 원칙에 위배된다


user - Board 관계
1.User가 Board를 작성한다            1 : n
2.User가 Board에 좋아요를 행한다  n : m  관계형 테이블을 하나 만들어 주는게 좋다
3.User가 Board에 댓글을 단다        n  : m  관계형 테이블을 하나 만들어 주는게 좋다



postman에서 확인하기------------------------------
http://localhost:5000/api/auth/signUp   post방식  row json선택후

{
  "userEmail":"citadell@naver.com",
  "userPassword": "qwer1234!!",
  "userPasswordCheck": "qwer1234!!",
  "userNickname": "jun",
  "userPhoneNumber":"010-9304-1234",
  "userAddress":"대한민국 서울시",
  "userAddressDetail":"강서구"
}


-------------------------------------------

result: true, message: 'sign in success', data: {…}}data: {token: 'eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJjaXRhQGNpdGEiLCJpY…t_DLdTg-rHsWmgPrOUUjX1_2HUEf-kEA13kygNDEmiQC_NkUg', exprTime: 3600000, user: {…}}message: "sign in success"result: true[[Prototype]]: Objectconstructor: ƒ Object()hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()__proto__: (...)get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()
index.tsx:29 eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJjaXRhQGNpdGEiLCJpYXQiOjE2ODIyMzI5OTEsImV4cCI6MTY4MjIzNjU5MX0.WfAbEJaQrqB68o4Z4-Wv3Iel8V9K-hhabAXcrgo9CneFXghutyBqf3FOJNnmwNEXkv9y7H1PDSH3UNrdEiFa3g 3600000 {userEmail: 'cita@cita', userPassword: '', userNickname: '사탕', userPhoneNumber: '01093043225', userAddress: '서울시 강서구 마곡서1로', …}
--------------------------------------------------------------

npm install react-cookie --force

npm install zustand --force


https://mui.com/material-ui/react-app-bar/
basic 가져와서 붙이기  Basic App bar

npm i @mui/icons-material --force



해당프로젝트가서 cmd
gradlew.bat clean build


gradlew clean







               
   






